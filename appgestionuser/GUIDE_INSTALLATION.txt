GUIDE D'INSTALLATION ET CONFIGURATION REACT - PROJET ANGENOR BLAMI
===================================================================

Ce guide vous explique comment installer et configurer React et tous les composants 
utilisés dans ce projet, étape par étape, pour débutants.

## PRÉREQUIS - CE QU'IL FAUT INSTALLER AVANT

### 1. Node.js (Obligatoire)
Node.js est le moteur qui fait fonctionner votre application.

**Installation :**
- Rendez-vous sur https://nodejs.org
- Téléchargez la version LTS (Long Term Support)
- Installez en suivant les instructions

**Vérification :**
```bash
node --version    # Doit afficher v18.0.0 ou plus récent
npm --version     # Doit afficher 8.0.0 ou plus récent
```

### 2. Éditeur de code (Recommandé)
**Visual Studio Code :** https://code.visualstudio.com/
- Gratuit et très populaire
- Extensions utiles pour React

### 3. Git (Pour la sauvegarde)
**Installation :** https://git-scm.com/
- Permet de sauvegarder vos modifications
- Collaborer avec d'autres développeurs

## CRÉATION D'UN NOUVEAU PROJET REACT

### Méthode 1 : Avec Vite (Recommandée - Plus rapide)
```bash
# Créer un nouveau projet
npm create vite@latest mon-projet-react -- --template react-ts

# Aller dans le dossier
cd mon-projet-react

# Installer les dépendances
npm install

# Lancer l'application
npm run dev
```

### Méthode 2 : Avec Create React App (Classique)
```bash
# Créer un nouveau projet
npx create-react-app mon-projet-react --template typescript

# Aller dans le dossier
cd mon-projet-react

# Lancer l'application
npm start
```

## INSTALLATION DES COMPOSANTS UTILISÉS DANS CE PROJET

### 1. TypeScript (Typage fort)
```bash
npm install -D typescript @types/react @types/react-dom @types/node
```

**Pourquoi TypeScript ?**
- Évite les erreurs de programmation
- Autocomplétion intelligente
- Code plus robuste

### 2. Tailwind CSS (Styles modernes)
```bash
# Installation de base
npm install -D tailwindcss postcss autoprefixer

# Initialisation
npx tailwindcss init -p

# Installation des plugins additionnels
npm install -D @tailwindcss/typography @tailwindcss/vite
```

**Configuration Tailwind (tailwind.config.js) :**
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}
```

### 3. Shadcn/UI (Composants d'interface)
```bash
# Installation de shadcn/ui
npx shadcn-ui@latest init

# Installation des composants de base
npx shadcn-ui@latest add button
npx shadcn-ui@latest add input
npx shadcn-ui@latest add form
npx shadcn-ui@latest add dialog
npx shadcn-ui@latest add card
npx shadcn-ui@latest add table
npx shadcn-ui@latest add toast
npx shadcn-ui@latest add dropdown-menu
npx shadcn-ui@latest add avatar
npx shadcn-ui@latest add badge
npx shadcn-ui@latest add progress
npx shadcn-ui@latest add tabs
npx shadcn-ui@latest add select
npx shadcn-ui@latest add label
npx shadcn-ui@latest add checkbox
npx shadcn-ui@latest add switch
```

### 4. TanStack Query (Gestion des données)
```bash
npm install @tanstack/react-query
```

**Configuration de base :**
```tsx
// src/lib/queryClient.ts
import { QueryClient } from '@tanstack/react-query'

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      retry: 2,
    },
  },
})
```

### 5. React Hook Form (Gestion des formulaires)
```bash
npm install react-hook-form @hookform/resolvers zod
```

### 6. Wouter (Navigation)
```bash
npm install wouter
```

### 7. Icônes Lucide React
```bash
npm install lucide-react
```

### 8. Utilitaires de styles
```bash
npm install class-variance-authority clsx tailwind-merge
```

##  CONFIGURATION DU BACKEND EXPRESS

### 1. Serveur Express
```bash
npm install express
npm install -D @types/express tsx
```

### 2. Authentification JWT
```bash
npm install jsonwebtoken bcryptjs
npm install -D @types/jsonwebtoken @types/bcryptjs
```

### 3. Validation des données
```bash
npm install zod drizzle-zod
```

### 4. Base de données (Optionnel)
```bash
# Pour PostgreSQL avec Drizzle ORM
npm install drizzle-orm @neondatabase/serverless
npm install -D drizzle-kit

# Pour d'autres bases de données
npm install pg              # PostgreSQL
npm install mysql2          # MySQL
npm install sqlite3         # SQLite
```

## STRUCTURE DE FICHIERS RECOMMANDÉE

```
mon-projet/
├── src/
│   ├── components/          # Composants réutilisables
│   │   ├── ui/             # Composants Shadcn/UI
│   │   ├── forms/          # Formulaires
│   │   └── layout/         # Mise en page
│   ├── pages/              # Pages de l'application
│   ├── hooks/              # Hooks personnalisés
│   ├── lib/                # Utilitaires
│   ├── types/              # Types TypeScript
│   └── assets/             # Images, icônes, etc.
├── server/                 # Code backend (si applicable)
├── public/                 # Fichiers statiques
└── package.json            # Dépendances
```

## SCRIPTS PACKAGE.JSON RECOMMANDÉS

```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "type-check": "tsc --noEmit"
  }
}
```

##  CONFIGURATION VITE (vite.config.ts)

```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
      "@components": path.resolve(__dirname, "./src/components"),
      "@pages": path.resolve(__dirname, "./src/pages"),
      "@lib": path.resolve(__dirname, "./src/lib"),
      "@hooks": path.resolve(__dirname, "./src/hooks"),
    },
  },
  server: {
    port: 5173,
    host: true,
  },
})
```

##  CONFIGURATION TYPESCRIPT (tsconfig.json)

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@components/*": ["./src/components/*"],
      "@pages/*": ["./src/pages/*"],
      "@lib/*": ["./src/lib/*"],
      "@hooks/*": ["./src/hooks/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

##  CONFIGURATION POSTCSS (postcss.config.js)

```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

##  COMMANDES DE DÉVELOPPEMENT UTILES

### Démarrage du projet
```bash
npm run dev          # Lance le serveur de développement
```

### Build et production
```bash
npm run build        # Compile pour la production
npm run preview      # Teste la version de production
```

### Vérifications
```bash
npm run lint         # Vérifie la qualité du code
npm run type-check   # Vérifie les types TypeScript
```

### Installation rapide de composants
```bash
# Ajouter tous les composants Shadcn/UI en une fois
npx shadcn-ui@latest add --all
```

##  RÉSOLUTION DE PROBLÈMES COURANTS

### Erreur "Module not found"
```bash
# Supprimer node_modules et réinstaller
rm -rf node_modules package-lock.json
npm install
```

### Erreur TypeScript
```bash
# Vérifier la configuration TypeScript
npx tsc --noEmit
```

### Problème de styles Tailwind
```bash
# Reconstruire les styles
npm run build
```

### Port déjà utilisé
```bash
# Changer le port dans vite.config.ts ou
npm run dev -- --port 3001
```

## RESSOURCES D'APPRENTISSAGE

### Documentation officielle
- React : https://react.dev/
- TypeScript : https://www.typescriptlang.org/docs/
- Vite : https://vitejs.dev/guide/
- Tailwind CSS : https://tailwindcss.com/docs
- Shadcn/UI : https://ui.shadcn.com/docs

### Tutoriels recommandés
- React Tutorial officiel : https://react.dev/learn
- TypeScript pour débutants : https://www.typescriptlang.org/docs/handbook/intro.html
- Tailwind CSS crash course : https://tailwindcss.com/docs/utility-first

##  BONNES PRATIQUES

### 1. Organisation du code
- Un composant par fichier
- Noms de fichiers en kebab-case (mon-composant.tsx)
- Noms de composants en PascalCase (MonComposant)

### 2. Styles
- Utilisez Tailwind CSS pour la cohérence
- Créez des composants réutilisables
- Pensez mobile-first

### 3. Performance
- Utilisez React.memo() pour les composants lourds
- Lazy loading pour les pages
- Optimisez les images

### 4. Sécurité
- Validez toujours les données côté serveur
- Utilisez HTTPS en production
- Chiffrez les mots de passe

## DÉPLOIEMENT

### Netlify (Gratuit pour les projets personnels)
```bash
npm run build
# Glissez-déposez le dossier 'dist' sur netlify.com
```

### Vercel (Gratuit pour les projets personnels)
```bash
npm install -g vercel
vercel
```

### Replit (Notre plateforme actuelle)
- Utilisez le bouton "Deploy" dans l'interface Replit
- Configuration automatique

Ce guide vous donne toutes les bases pour créer et configurer un projet React moderne 
comme celui d'Angenor Blami. Commencez petit et ajoutez les fonctionnalités progressivement !